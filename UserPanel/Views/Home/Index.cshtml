@model HomeModel;
@{
    ViewData["Title"] = "Home Page";
    int rate1 = (int)ButtonFilterRate.RATE_1;
    int rate2 = (int)ButtonFilterRate.RATE_2;
    int rate3 = (int)ButtonFilterRate.RATE_3;
    
}
<div class="row p-10">
    <div class="col-12">
        <div class="w-100 d-flex justify-between">
            <div>
                <h1 class="text-4xl font-semibold">Pulpit</h1>
            </div>
            <div class="range-buttons">
                <button onclick="handleFilterClick()" class="btn btn-flat gray"><i class="icon-filter"></i>filtruj</button>
                <a asp-controller="Home" asp-action="index" asp-route-timerate="@rate1" value="7" onclick="handleFilterClickButton()"  class="btn glow btn-flat @(Model?.FilterParametr.rate ==  ButtonFilterRate.RATE_1 ? "success check" : "white")">7 dni</a>
                <a asp-controller="Home" asp-action="index" asp-route-timerate="@rate2" value="14" onclick="handleFilterClickButton()" class="btn glow btn-flat @(Model?.FilterParametr.rate ==  ButtonFilterRate.RATE_2 ? "success check" : "white")">14 dni</a>
                <a asp-controller="Home" asp-action="index" asp-route-timerate="@rate3" value="30" onclick="handleFilterClickButton()" class="btn glow btn-flat @(Model?.FilterParametr.rate ==  ButtonFilterRate.RATE_3 ? "success check" : "white")">30 dni</a>
            </div>
        </div>
    </div>
</div>
<div class="row pt-6 inactive" data-type-search-row>
        <div class="col-12 container">
        <div class="w-100 d-flex items-center">
            <div class="w-100 d-flex items-center" id="select-camp">
                <select name="campaning" class="w-full" data-id="select-01" data-role="select" multiple onchange="handleFilterChange(this.dataset.id)">
                @foreach(var c in Model.FilterParametr.FilterCampanings ?? new List<Campaning>())
                {
                    <option selected value="@c.id">@c.name</option>
                }
                </select>
                <span data-id="select-01" class="absolute top-1/2 -translate-y-1/2 pl-2 placeholder-span">choose campaning</span>
                <span class="input-group-addon h-[40px] d-block">
                    <button onclick="handleFilter()" class="btn-flat d-flex success">
                        <i class="icon-filter"></i> Zobacz
                    </button>
                </span>
            </div>
        </div>
        </div>
 </div>
 <div class="row mt-10">
    <div class="col-12">
        <div class="mx-4">
            <div class="mb-5">
                <h1 class="text-2xl font-semibold">Statystyki</h1>
            </div>
            <div class="col-12 d-flex flex-wrap gap-x-4 gap-y-10">
                <div class="grow">
                    <div class="d-flex justify-items-center justify-center p-6 bg-white border border-gray-200 rounded-lg shadow hover:bg-gray-100 dark:bg-gray-800 dark:border-gray-700 dark:hover:bg-gray-700">
                        <div id="visit" class="w-[450px] h-[250px]"></div>
                    </div>
                     <div class="absolute">
                        <p class="p-2 text-lg italic text-gray-500">Views statistic</p>
                    </div>

                </div>
                <div class="grow">
                    <div class="d-flex justify-items-center justify-center p-6 bg-white border border-gray-200 rounded-lg shadow hover:bg-gray-100 dark:bg-gray-800 dark:border-gray-700 dark:hover:bg-gray-700">
                        <div id="clicks" class="w-[450px] h-[250px]"></div>
                    </div>
                     <div class="absolute">
                        <p class="p-2 text-lg italic text-gray-500">Clicks statistic</p>
                    </div>

                </div>
                <div class="grow">
                    <div class="d-flex justify-items-center justify-center p-6 bg-white border border-gray-200 rounded-lg shadow hover:bg-gray-100 dark:bg-gray-800 dark:border-gray-700 dark:hover:bg-gray-700">
                        <div id="budget" class="w-[450px] h-[250px]"></div>
                    </div>
                     <div class="absolute">
                        <p class="p-2 text-lg italic text-gray-500">Budged statistic</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="row mt-20">
    <div class="w-full row-stats grid grid-cols-3 justify-center justify-items-center items-center min-h-[200px] mx-4">
		<div>
			<h4>Najczęściej wyświetlane</h4>
						<p>brak statystyk towarów</p>
		</div>
		<div>
			<h4>Najczęściej zamawiane</h4>
			<p>brak statystyk towarów</p>
	    </div>
		<div>
			<h4>Unikatowi odwiedzający</h4>
		</div>
    </div>
</div>
<script>

    const checkSelectState = (selectInput,spanPlaceholder) => {
        if (selectInput.selectedIndex !== -1) {
            spanPlaceholder.style.display = "none";
        }
        else {
            spanPlaceholder.style.display = "block";
        }
    }
    const FilterCampaningInit = () => {
        var selectContainer = document.querySelector("#select-camp");
        var selectInput = selectContainer.querySelector("select");
        var selectPlaceholder = selectContainer.querySelector("span.placeholder-span");
        if (selectInput && selectPlaceholder) checkSelectState(selectInput, selectPlaceholder)
    }
    const handleFilterClick = () => {
        document.querySelector("div.row[data-type-search-row]").classList.toggle("inactive")
    }
    const handleFilter = async () => {

        try {

            const selectedList = [...document.querySelector("#select-camp select").selectedOptions].map(option => option.value);
            if (!selectedList.length) {
                loadMoris()
                return
            }
            const range = document.querySelector("div.range-buttons a.check")?.getAttribute('value') || 7;
            const url = "http://localhost:5012/api/campstats";

            let time = new Date(Date.now());
            time.setDate(time.getDate() - Number(range))
            time = time.toISOString()

            const response = await fetch(url, {
                method: "POST",
                cache: "no-cache",
                credentials: "same-origin",
                headers: {
                    "Content-Type": "application/json",
                },
                referrerPolicy: "no-referrer",
                body: JSON.stringify({ list: selectedList, end: time }),
            })
            if (response.ok) {
                const data = await response.json();
                loadMoris(data)
            }

        } catch (e) {
            console.error(e)
        }
    }
    const handleFilterChange = (id) => {

        checkSelectState(
            [...document.querySelectorAll('select')]
                .find((select) => select.dataset.id == id), 
            [...document.querySelectorAll('span.placeholder-span')]
                .find((select) => select.dataset.id == id)
            )

    }
    const loadInit = async () => {
      handleFilter()
    }
    const loadMoris = (data) => {
        if (data == null) {
            return
        }
        loadVisitChart(extractChartDataVisit(data,"visit"))
        loadClicksChart(extractChartDataClicks(data, "clicks"))
        loadBudgetChart(extractChartDataBudget(data, "budget"))
    }
    const loadVisitChart = (dataVisit) => {
        document.querySelector('div#visit').innerHTML = '';
        if(dataVisit == null) return
        Morris.Bar({
            element: 'visit',
            data: dataVisit.data,
            xkey: 'date',
            ykeys: dataVisit.labels,
            labels: dataVisit.labels
        }).on('click', function (i, row) {
            console.log(i, row);
        });
    }
    const loadClicksChart = (dataClicks) => {
        document.querySelector('div#clicks').innerHTML = '';
        if (dataClicks == null) return
        Morris.Donut({
            element: 'clicks',
            data: dataClicks,
            formatter: function (x) { return x + " clicks" }
        }).on('click', function (i, row) {
            console.log(i, row);
        });
    }
    const loadBudgetChart = (dataBudget) => {
        document.querySelector('div#budget').innerHTML = '';
        window.m = Morris.Line({
            element: 'budget',
            data: dataBudget.data,
            xkey: 'date',
            ykeys: dataBudget.labels,
            labels: dataBudget.labels,
            parseTime: false,
            goals: [dataBudget.min, (dataBudget.min + dataBudget.max) / 2, dataBudget.max]
        });
    }
    const extractChartDataVisit = (data, keyString) =>
    {
        let payload = [];
        const labels = [];
        data.forEach((campaning, i) => {
            labels.push(campaning.name)
            campaning[keyString].forEach((item, index) => {
                if (payload.length <= index)
                    payload.push({date: item.date})
                payload[index] = { ...payload[index], [campaning.name]: item.value }
            })
        })
        payload = {data: payload, labels: labels}
        return payload
    }
    const extractChartDataClicks = (data, keyString) => {
        let payload = [];
        data.forEach((campaning, i) => {
            campaning[keyString].forEach((item, index) => {
                if (payload.length <= i)
                    payload.push({ label: campaning.name, value: 0 })
                payload[i] = { ...payload[i], value: Number(payload[i].value += item.value) }
            })
        })
        return payload
    }
    const extractChartDataBudget = (data, keyString) => {
        let payload = [];
        const labels = [];
        const budgetList = []
        data.forEach((campaning, i) => {
            labels.push(campaning.name)
            campaning[keyString].forEach((item, index) => {
                if (payload.length <= index)
                    payload.push({ date: item.date })
                budgetList.push(item.value)
                payload[index] = { ...payload[index], [campaning.name]: item.value }
            })
        })
        payload = { 
            data: payload, 
            labels: labels, 
            max: Math.max(...budgetList),
            min: Math.min(...budgetList)
        }
        return payload
    }
    (function Init() {
        if (window.addEventListener) {
            window.addEventListener("load", () => {
                FilterCampaningInit()
                loadInit();
            })
        }
    })()


</script>
