@model HomeModel;
@{
    ViewData["Title"] = "Home Page";
    int rate1 = (int)ButtonFilterRate.RATE_1;
    int rate2 = (int)ButtonFilterRate.RATE_2;
    int rate3 = (int)ButtonFilterRate.RATE_3;
    
}
<div class="row p-10">
    <div class="col-12">
        <div class="w-100 d-flex justify-between">
            <div>
                <h1 class="text-4xl font-semibold">Pulpit</h1>
            </div>
            <div class="range-buttons">
                <button onclick="handleFilterClick()" class="btn btn-flat gray"><i class="icon-filter"></i>filtruj</button>
                <a asp-controller="Home" asp-action="index" asp-route-timerate="@rate1" value="7" onclick="handleFilterClickButton()"  class="btn glow btn-flat @(Model?.FilterParametr.rate ==  ButtonFilterRate.RATE_1 ? "success check" : "white")">7 dni</a>
                <a asp-controller="Home" asp-action="index" asp-route-timerate="@rate2" value="14" onclick="handleFilterClickButton()" class="btn glow btn-flat @(Model?.FilterParametr.rate ==  ButtonFilterRate.RATE_2 ? "success check" : "white")">14 dni</a>
                <a asp-controller="Home" asp-action="index" asp-route-timerate="@rate3" value="30" onclick="handleFilterClickButton()" class="btn glow btn-flat @(Model?.FilterParametr.rate ==  ButtonFilterRate.RATE_3 ? "success check" : "white")">30 dni</a>
            </div>
        </div>
    </div>
</div>
<div class="row pt-6 inactive" data-type-search-row>
        <div class="col-12 container">
        <div class="w-100 d-flex items-center">
            <div class="w-100 d-flex items-center" id="select-camp">
                <select name="campaning" class="w-full" data-id="select-01" data-role="select" multiple onchange="handleFilterChange()">
                @foreach(var c in Model.FilterParametr.FilterCampanings ?? new List<Campaning>())
                {
                    <option selected value="@c.id">@c.name</option>
                }
                </select>
                <span data-id="select-01" class="absolute top-1/2 -translate-y-1/2 pl-2 placeholder-span">choose campaning</span>
                <span class="input-group-addon h-[40px] d-block">
                    <button onclick="handleFilterSumbit()" class="btn-flat d-flex success">
                        <i class="icon-filter"></i> Zobacz
                    </button>
                </span>
            </div>
        </div>
        </div>
 </div>
 <div class="row mt-10">
    <div class="col-12">
        <div class="mx-4">
            <div class="mb-5">
                <h1 class="text-2xl font-semibold">Statystyki</h1>
            </div>
            <div class="col-12 d-flex flex-wrap gap-x-4 gap-y-10">
                <div class="grow">
                    <div class="d-flex justify-items-center justify-center p-6 bg-white border border-gray-200 rounded-lg shadow hover:bg-gray-100 dark:bg-gray-800 dark:border-gray-700 dark:hover:bg-gray-700">
                        <div id="visit" class="w-[450px] h-[250px] canvas"></div>
                        <div class="w-[450px] h-[250px] justify-items-center justify-center no_data" style="display: none">
                            <img src="/assets/empty_doc.svg" width="200" height="200" />
                        </div>
                    </div>
                     <div class="absolute">
                        <p class="p-2 text-lg italic text-gray-500">Views statistic</p>
                    </div>

                </div>
                <div class="grow">
                    <div class="d-flex justify-items-center justify-center p-6 bg-white border border-gray-200 rounded-lg shadow hover:bg-gray-100 dark:bg-gray-800 dark:border-gray-700 dark:hover:bg-gray-700">
                        <div id="clicks" class="w-[450px] h-[250px] canvas"></div>
                        <div class="w-[450px] h-[250px] justify-items-center justify-center no_data" style="display: none">
                            <img src="/assets/empty_doc.svg" width="200" height="200" />
                        </div>
                    </div>
                     <div class="absolute">
                        <p class="p-2 text-lg italic text-gray-500">Clicks statistic</p>
                    </div>

                </div>
                <div class="grow">
                    <div class="d-flex justify-items-center justify-center p-6 bg-white border border-gray-200 rounded-lg shadow hover:bg-gray-100 dark:bg-gray-800 dark:border-gray-700 dark:hover:bg-gray-700">
                        <div id="budget" class="w-[450px] h-[250px] canvas"></div>
                        <div class="w-[450px] h-[250px] justify-items-center justify-center no_data" style="display: none">
                            <img src="/assets/empty_doc.svg" width="200" height="200" />
                        </div>
                    </div>
                     <div class="absolute">
                        <p class="p-2 text-lg italic text-gray-500">Budged statistic</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="row mt-20">
    <div class="w-full row-stats grid grid-cols-3 justify-center justify-items-center items-center min-h-[200px] mx-4">
		<div>
			<h4>Najczęściej wyświetlane</h4>
						<p>brak statystyk towarów</p>
		</div>
		<div>
			<h4>Najczęściej zamawiane</h4>
			<p>brak statystyk towarów</p>
	    </div>
		<div>
			<h4>Unikatowi odwiedzający</h4>
		</div>
    </div>
</div>
<script>

    const Utils = MorrisUtils();

    (function Init() {
        if (window.addEventListener) {
            window.addEventListener("load", () => {
                loadContext();
                loadCharts();
                FilterCampaningInit()
            })
        }
    })()
    const contextHTML = {
        markups: {
            selectedInputCamp: "#select-camp select",
            selectedRate: "div.range-buttons a.check",
            visit: "div#visit",
            clicks: "div#clicks",
            budget: "div#budget"
        },
        data: {
            campaningsList: [],
            range: null
        }
    }
    
    const loadContext = () => {

        loadSelected()
        contextHTML.data.range = document.querySelector(contextHTML.markups.selectedRate)?.getAttribute('value') || 7;

    }
    const handleFilterSumbit = () => {
        loadSelected()
        loadCharts()
    }
    const loadCharts = async () => {

        const fetchApi = getFetchApi();

        if (!contextHTML.data.campaningsList.length) {
            loadMoris()
            return
        }

        const range = contextHTML.data.range
        const url = `api/campstats`;
        let time = new Date(Date.now());
        time.setDate(time.getDate() - range)
        time = time.toISOString()
        try {
            const result = await fetchApi.post(url, { list: contextHTML.data.campaningsList, end: time })
            console.log("result",result)
            loadMoris(result);
        } catch (e) {
            console.error(e)
        }
    }
    const check_data_valid = (data,typeKey) => {
        return data.some(item => {
            return item[typeKey].length !== 0
        });
    }
    const FilterCampaningInit = () => {
        var selectInput = document.querySelector("#select-camp select");
        var selectPlaceholder = document.querySelector("#select-camp span.placeholder-span");
        if (selectInput && selectPlaceholder) {

            if (selectInput.selectedIndex !== -1) {
                selectPlaceholder.style.display = "none";
            }
            else {
                selectPlaceholder.style.display = "block";
            }
        }
    }
    const handleFilterClick = () => {
        document.querySelector("div.row[data-type-search-row]").classList.toggle("inactive")
    }

    const handleFilterChange = () => FilterCampaningInit()

    const loadMoris = (data) => {

        if (data == null) {
            return
        }

        if (check_data_valid(data,"visit")) Utils.loadVisitChart(Utils.extractChartDataVisit(data, "visit"),contextHTML.markups.visit)
        if (check_data_valid(data, "clicks")) Utils.loadClicksChart(Utils.extractChartDataClicks(data, "clicks"),contextHTML.markups.clicks)
        if (check_data_valid(data, "budget")) Utils.loadBudgetChart(Utils.extractChartDataBudget(data, "budget"), contextHTML.markups.budget)
  
    }
    const loadSelected = () => {
        const selectElement = document.querySelector(contextHTML.markups.selectedInputCamp);
        if (selectElement) {
            const selectedList = [...selectElement.selectedOptions].map(option => option.value);
            contextHTML.data.campaningsList = selectedList
        }
    }

</script>
